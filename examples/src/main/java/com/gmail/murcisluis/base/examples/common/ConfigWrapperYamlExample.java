package com.gmail.murcisluis.base.examples.common;

/**
 * Ejemplo que demuestra las capacidades de generaci√≥n de YAML del ConfigWrapper.
 * 
 * El ConfigWrapper ahora puede:
 * 1. Guardar su configuraci√≥n actual a cualquier archivo YAML
 * 2. Crear backups autom√°ticos con timestamp
 * 3. Exportar configuraci√≥n con comentarios legibles
 * 
 * Esto es √∫til para:
 * - Crear backups antes de cambios importantes
 * - Exportar configuraciones para otros servidores
 * - Generar plantillas de configuraci√≥n
 * - Debugging y an√°lisis de configuraci√≥n
 */
public class ConfigWrapperYamlExample {
    
    public static void main(String[] args) {
        System.out.println("=== EJEMPLO: GENERACI√ìN DE YAML DESDE CONFIGWRAPPER ===");
        
        // ==================== CARGAR CONFIGURACI√ìN ACTUAL ====================
        System.out.println("\n1. Cargando configuraci√≥n actual...");
        ConfigWrapper config = new ConfigWrapper();
        config.printConfigSummary();
        
        // ==================== GUARDAR A ARCHIVO YAML SIMPLE ====================
        System.out.println("\n2. Guardando configuraci√≥n a archivo YAML simple...");
        
        boolean saved = config.saveToYaml("mi-configuracion-exportada.yml");
        if (saved) {
            System.out.println("‚úì Configuraci√≥n guardada en 'mi-configuracion-exportada.yml'");
        } else {
            System.out.println("‚úó Error al guardar configuraci√≥n");
        }
        
        // ==================== CREAR BACKUP AUTOM√ÅTICO ====================
        System.out.println("\n3. Creando backup autom√°tico con timestamp...");
        
        String backupFile = config.createBackup();
        if (backupFile != null) {
            System.out.println("‚úì Backup creado: " + backupFile);
            System.out.println("  Este archivo contiene todos los valores actuales en memoria");
        }
        
        // ==================== EXPORTAR CON COMENTARIOS ====================
        System.out.println("\n4. Exportando configuraci√≥n con comentarios...");
        
        boolean exported = config.exportToYamlWithComments("config-con-comentarios.yml");
        if (exported) {
            System.out.println("‚úì Configuraci√≥n exportada con comentarios en 'config-con-comentarios.yml'");
            System.out.println("  Este archivo incluye:");
            System.out.println("  - Comentarios explicativos");
            System.out.println("  - Fecha de exportaci√≥n");
            System.out.println("  - Estructura organizada por secciones");
        }
        
        // ==================== CASOS DE USO PR√ÅCTICOS ====================
        System.out.println("\n5. Casos de uso pr√°cticos:");
        
        // Caso 1: Backup antes de cambios
        System.out.println("\n   Caso 1: Backup antes de cambios importantes");
        String preChangeBackup = config.createBackup();
        System.out.println("   - Backup pre-cambio: " + preChangeBackup);
        
        // Caso 2: Exportar configuraci√≥n para otro servidor
        System.out.println("\n   Caso 2: Exportar para otro servidor");
        config.saveToYaml("config-servidor-2.yml");
        System.out.println("   - Configuraci√≥n exportada para servidor 2");
        
        // Caso 3: Crear plantilla de configuraci√≥n
        System.out.println("\n   Caso 3: Crear plantilla con comentarios");
        config.exportToYamlWithComments("plantilla-config.yml");
        System.out.println("   - Plantilla creada con documentaci√≥n completa");
        
        // ==================== DEMOSTRACI√ìN CON CONFIGURACI√ìN MODIFICADA ====================
        System.out.println("\n6. Demostraci√≥n con ConfigWrapperBuilder:");
        
        // Crear configuraci√≥n personalizada
        ConfigWrapper customConfig = ConfigWrapperBuilder.create()
            .serverName("Servidor de Prueba YAML")
            .maxPlayers(100)
            .economyEnabled(true)
            .startingMoney(5000.0)
            .currencySymbol("‚Ç¨")
            .chatFormat("[%player%] %message%")
            .welcomeMessage(true, "¬°Bienvenido %player% al servidor!")
            .mysqlDatabase("localhost", 3306, "minecraft", "admin", "password", true)
            .logging("DEBUG", true, true, 30)
            .build();
        
        System.out.println("\n   Configuraci√≥n personalizada creada:");
        customConfig.printConfigSummary();
        
        // Exportar configuraci√≥n personalizada
        System.out.println("\n   Exportando configuraci√≥n personalizada...");
        customConfig.saveToYaml("config-personalizada.yml");
        customConfig.exportToYamlWithComments("config-personalizada-comentada.yml");
        
        System.out.println("   ‚úì Configuraci√≥n personalizada exportada en 2 formatos");
        
        // ==================== VERIFICACI√ìN DE ARCHIVOS GENERADOS ====================
        System.out.println("\n7. Archivos YAML generados:");
        String[] generatedFiles = {
            "mi-configuracion-exportada.yml",
            backupFile,
            "config-con-comentarios.yml",
            "config-servidor-2.yml",
            "plantilla-config.yml",
            "config-personalizada.yml",
            "config-personalizada-comentada.yml"
        };
        
        for (String file : generatedFiles) {
            if (file != null) {
                System.out.println("   - " + file);
            }
        }
        
        // ==================== CONSEJOS DE USO ====================
        System.out.println("\n8. Consejos de uso:");
        System.out.println("   üí° Usa saveToYaml() para exportaciones r√°pidas");
        System.out.println("   üí° Usa createBackup() antes de cambios importantes");
        System.out.println("   üí° Usa exportToYamlWithComments() para documentaci√≥n");
        System.out.println("   üí° Los archivos generados son compatibles con ConfigurationManager");
        System.out.println("   üí° Puedes cargar estos archivos con ConfigWrapperBuilder.fromConfig()");
        
        System.out.println("\n=== EJEMPLO COMPLETADO ===");
    }
    
    /**
     * Ejemplo de flujo de trabajo completo con backups
     */
    public static void workflowExample() {
        System.out.println("\n=== FLUJO DE TRABAJO CON BACKUPS ===");
        
        // 1. Cargar configuraci√≥n actual
        ConfigWrapper config = new ConfigWrapper();
        
        // 2. Crear backup antes de cambios
        String backup = config.createBackup();
        System.out.println("Backup creado: " + backup);
        
        // 3. Simular cambios (en un caso real, modificar√≠as el archivo config.yml)
        System.out.println("Simulando cambios en la configuraci√≥n...");
        
        // 4. Crear nueva configuraci√≥n modificada
        ConfigWrapper modifiedConfig = ConfigWrapperBuilder.fromConfig("config.yml")
            .maxPlayers(150)  // Aumentar capacidad
            .debug(true)      // Activar debug
            .build();
        
        // 5. Exportar configuraci√≥n modificada
        modifiedConfig.saveToYaml("config-modificada.yml");
        
        // 6. Crear backup de la configuraci√≥n modificada
        String modifiedBackup = modifiedConfig.createBackup();
        
        System.out.println("Configuraci√≥n modificada guardada");
        System.out.println("Backup original: " + backup);
        System.out.println("Backup modificado: " + modifiedBackup);
    }
    
    /**
     * Ejemplo de migraci√≥n entre servidores
     */
    public static void migrationExample() {
        System.out.println("\n=== MIGRACI√ìN ENTRE SERVIDORES ===");
        
        // Servidor origen
        ConfigWrapper sourceConfig = new ConfigWrapper();
        
        // Exportar configuraci√≥n base
        sourceConfig.exportToYamlWithComments("servidor-origen.yml");
        
        // Crear configuraci√≥n para servidor de desarrollo
        ConfigWrapper devConfig = ConfigWrapperBuilder.fromConfig("servidor-origen.yml")
            .serverName("Servidor de Desarrollo")
            .maxPlayers(10)
            .debug(true)
            .maintenanceMode(false)
            .sqliteDatabase("dev-data.db")
            .build();
        
        devConfig.exportToYamlWithComments("servidor-desarrollo.yml");
        
        // Crear configuraci√≥n para servidor de producci√≥n
        ConfigWrapper prodConfig = ConfigWrapperBuilder.fromConfig("servidor-origen.yml")
            .serverName("Servidor de Producci√≥n")
            .maxPlayers(200)
            .debug(false)
            .mysqlDatabase("prod-db.example.com", 3306, "minecraft_prod", "admin", "prod_pass", true)
            .logging("INFO", true, true, 90)
            .build();
        
        prodConfig.exportToYamlWithComments("servidor-produccion.yml");
        
        System.out.println("Configuraciones de migraci√≥n creadas:");
        System.out.println("- servidor-origen.yml (base)");
        System.out.println("- servidor-desarrollo.yml (dev)");
        System.out.println("- servidor-produccion.yml (prod)");
    }
}