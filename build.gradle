plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

sourceCompatibility = 17
targetCompatibility = 17

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://oss.sonatype.org/content/groups/public/' }
        maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.codemc.io/repository/maven-snapshots/' }
        maven { url 'https://repo.alessiodp.com/releases/'}
    }


}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        implementation  'org.apache.commons:commons-lang3:3.13.0'
        implementation  'javax.annotation:javax.annotation-api:1.3.2'
        implementation  'org.reflections:reflections:0.9.12'
        compileOnly   'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'
        implementation 'org.jetbrains:annotations:22.0.0'
        annotationProcessor 'org.jetbrains:annotations:22.0.0'
        implementation "net.kyori:adventure-text-minimessage:4.14.0"
        implementation "net.kyori:adventure-text-serializer-legacy:4.14.0"
    }

    tasks.processResources {
        mustRunAfter 'compileJava'
        doFirst {
            println " project - Expanding with displayName: ${project.property("name")}"
        }
        filesMatching(["plugin.yml", "bungee.yml"]) {
            expand(version: (parent?.version ?: project.version), displayName: rootProject.ext.displayName)
        }
    }

    compileJava {
        options.annotationProcessorPath = configurations.annotationProcessor
    }
}

// ... (tu c√≥digo existente hasta processResources)

processResources {
    mustRunAfter 'compileJava'
    filesMatching(["plugin.yml", "bungee.yml"]) {
        expand(version: project.version, displayName: project.property("name"))
    }
}


shadowJar {
    dependsOn 'processResources'
    from project(':spigot').sourceSets.main.output
    from project(':bungeecord').sourceSets.main.output
    from project(':common').sourceSets.main.output

    mergeServiceFiles()

    configurations = [
            project(':spigot').configurations.runtimeClasspath,
            project(':bungeecord').configurations.runtimeClasspath,
            project(':common').configurations.runtimeClasspath
    ]

}

task copyJar(type: Copy) {
    doLast {
        copy {
            from shadowJar.archiveFile
            into 'C:\\panel\\servers\\XCord\\plugins'
        }
        copy {
            from shadowJar.archiveFile
            into 'C:\\panel\\servers\\Lobby\\plugins'
        }
    }
}

shadowJar.dependsOn subprojects*.tasks*.withType(JavaCompile)
processResources.dependsOn subprojects*.tasks*.withType(JavaCompile)
copyJar.dependsOn shadowJar