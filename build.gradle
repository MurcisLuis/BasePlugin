plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.gradleup.shadow' version '8.3.6'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    withSourcesJar()
    withJavadocJar()
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://oss.sonatype.org/content/groups/public/' }
        maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.codemc.io/repository/maven-snapshots/' }
        maven { url 'https://repo.alessiodp.com/releases/'}
    }


}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        api 'org.apache.commons:commons-lang3:3.17.0'
        api 'javax.annotation:javax.annotation-api:1.3.2'
        api 'org.reflections:reflections:0.10.2'
        compileOnly 'org.projectlombok:lombok:1.18.34'
        annotationProcessor 'org.projectlombok:lombok:1.18.34'
        api 'org.jetbrains:annotations:24.1.0'
        annotationProcessor 'org.jetbrains:annotations:24.1.0'
        api "net.kyori:adventure-text-minimessage:4.17.0"
        api "net.kyori:adventure-text-serializer-legacy:4.17.0"
    }

    tasks.processResources {
        mustRunAfter 'compileJava'
        doFirst {
            println " project - Expanding with displayName: ${project.property("name")}"
        }
        filesMatching(["plugin.yml", "bungee.yml"]) {
            expand(version: (parent?.version ?: project.version), displayName: rootProject.ext.displayName)
        }
    }

    // Configuración para publicación Maven
    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                
                pom {
                    name = project.name
                    description = 'Base plugin framework for Minecraft servers (Spigot/BungeeCord)'
                    url = 'https://github.com/murcisluis/BasePlugin'
                    
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    
                    developers {
                        developer {
                            id = 'murcisluis'
                            name = 'Luis Murcis'
                            email = 'murcisluis@gmail.com'
                        }
                    }
                }
            }
        }
        
        repositories {
            maven {
                name = 'GitHubPackages'
                url = 'https://maven.pkg.github.com/murcisluis/BasePlugin'
                credentials {
                    username = project.findProperty('gpr.user') ?: System.getenv('USERNAME')
                    password = project.findProperty('gpr.key') ?: System.getenv('TOKEN')
                }
            }
        }
    }

    compileJava {
        options.annotationProcessorPath = configurations.annotationProcessor
    }
}

// ... (tu código existente hasta processResources)

processResources {
    mustRunAfter 'compileJava'
    filesMatching(["plugin.yml", "bungee.yml"]) {
        expand(version: project.version, displayName: project.property("name"))
    }
}


shadowJar {
    dependsOn 'processResources'
    from project(':spigot').sourceSets.main.output
    from project(':bungeecord').sourceSets.main.output
    from project(':common').sourceSets.main.output

    mergeServiceFiles()

    configurations = [
            project(':spigot').configurations.runtimeClasspath,
            project(':bungeecord').configurations.runtimeClasspath,
            project(':common').configurations.runtimeClasspath
    ]

}

task copyJar(type: Copy) {
    doLast {
        copy {
            from shadowJar.archiveFile
            into 'C:\\panel\\servers\\XCord\\plugins'
        }
        copy {
            from shadowJar.archiveFile
            into 'C:\\panel\\servers\\Lobby\\plugins'
        }
    }
}

shadowJar.dependsOn subprojects*.tasks*.withType(JavaCompile)
processResources.dependsOn subprojects*.tasks*.withType(JavaCompile)
copyJar.dependsOn shadowJar